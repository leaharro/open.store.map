const AlertCircle = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        );

        // Excel export functionality
        const exportToExcel = (data, filename) => {
            // Create CSV content
            const headers = ['Status', 'Retailer', 'Store Name', 'Store Number', 'Address', 'City', 'State', 'ZIP', 'Latitude', 'Longitude'];
            const csvContent = [
                headers.join(','),
                ...data.map(store => [
                    `"${store.status}"`,
                    `"${store.retailer}"`,
                    `"${store.storeName}"`,
                    `"${store.storeNumber}"`,
                    `"${store.address}"`,
                    `"${store.city}"`,
                    `"${store.state}"`,
                    `"${store.zip}"`,
                    store.latitude,
                    store.longitude
                ].join(','))
            ].join('\n');

            // Create and download file
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Freedom THD Stores Map</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Maps JavaScript API -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBHcVkUgYLoJnNKpTecRUpAyMHU-T8HqFY&callback=initMap"></script>
    <style>
        body { margin: 0; font-family: system-ui, -apple-system, sans-serif; }
        #map { height: 100%; width: 100%; }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useMemo, useRef } = React;

        // Configuration - FULLY CONFIGURED
        const CONFIG = {
            // Your NEW Google Sheet ID (extracted from URL)
            SHEET_ID: '1SzcwBIooLjgc8lVcXFyPM7UHc5eaav1y297VeRSOhlg',
            
            // Your Freedom THD Stores sheet tab name
            SHEET_NAME: 'Freedom THD Stores',
            
            // Your Google API Key (same as before)
            API_KEY: 'AIzaSyBHcVkUgYLoJnNKpTecRUpAyMHU-T8HqFY',
            
            // Google Maps API Key (same as above)
            MAPS_API_KEY: 'AIzaSyBHcVkUgYLoJnNKpTecRUpAyMHU-T8HqFY',
            
            // Auto-refresh interval in minutes (set to 0 to disable)
            REFRESH_MINUTES: 5
        };

        // Global variables for Google Maps
        let map = null;
        let markers = [];

        // Lucide React icons as simple SVG components
        const Filter = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
            </svg>
        );

        const Search = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        );

        const ExternalLink = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
            </svg>
        );

        const Loader = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
        );

        const RefreshCw = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M1 4v6h6M23 20v-6h-6" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.49 9A9 9 0 005.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 013.51 15" />
            </svg>
        );

        const Download = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-4-4m4 4l4-4m5-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h14a2 2 0 002-2V7z" />
            </svg>
        );

        // Initialize Google Map
        window.initMap = function() {
            console.log('Google Maps API loaded');
        };

        const FreedomTHDStoresMap = () => {
            const [stores, setStores] = useState([]);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState('');
            const [lastUpdated, setLastUpdated] = useState(null);
            const [searchTerm, setSearchTerm] = useState('');
            const [statusFilter, setStatusFilter] = useState('all');
            const [stateFilter, setStateFilter] = useState('all');
            const [selectedStore, setSelectedStore] = useState(null);
            const mapRef = useRef(null);
            const [mapLoaded, setMapLoaded] = useState(false);

            // Status configuration
            const getStatusColor = (status) => {
                switch (status.toLowerCase()) {
                    case 'open': return '#10B981';    // Green
                    case 'reserved': return '#F59E0B'; // Yellow/Orange
                    case 'staffed': return '#EF4444';  // Red
                    default: return '#6B7280';         // Gray
                }
            };

            const getStatusBgColor = (status) => {
                switch (status.toLowerCase()) {
                    case 'open': return '#D1FAE5';     // Light green
                    case 'reserved': return '#FEF3C7'; // Light yellow
                    case 'staffed': return '#FEE2E2';  // Light red
                    default: return '#F3F4F6';         // Light gray
                }
            };

            const getStatusTextColor = (status) => {
                switch (status.toLowerCase()) {
                    case 'open': return '#065F46';     // Dark green
                    case 'reserved': return '#92400E'; // Dark yellow
                    case 'staffed': return '#991B1B';  // Dark red
                    default: return '#374151';         // Dark gray
                }
            };

            const initializeMap = () => {
                if (!window.google || !mapRef.current) return;

                // Create map centered on US
                map = new window.google.maps.Map(mapRef.current, {
                    zoom: 4,
                    center: { lat: 39.8283, lng: -98.5795 }, // Center of US
                    mapTypeId: 'roadmap',
                    styles: [
                        {
                            featureType: 'poi',
                            elementType: 'labels',
                            stylers: [{ visibility: 'off' }]
                        }
                    ]
                });

                setMapLoaded(true);
                console.log('Google Map initialized');
            };

            const addMarkersToMap = (storeData) => {
                if (!map || !window.google) return;

                // Clear existing markers
                markers.forEach(marker => marker.setMap(null));
                markers = [];

                // Add new markers
                storeData.forEach(store => {
                    const marker = new window.google.maps.Marker({
                        position: { lat: store.latitude, lng: store.longitude },
                        map: map,
                        title: store.storeName,
                        icon: {
                            path: window.google.maps.SymbolPath.CIRCLE,
                            fillColor: getStatusColor(store.status),
                            fillOpacity: 1,
                            strokeColor: '#ffffff',
                            strokeWeight: 2,
                            scale: 8
                        }
                    });

                    const statusDisplay = store.status.charAt(0).toUpperCase() + store.status.slice(1).toLowerCase();

                    const infoWindow = new window.google.maps.InfoWindow({
                        content: `
                            <div style="padding: 8px; min-width: 200px;">
                                <h3 style="margin: 0 0 4px 0; font-size: 16px; font-weight: bold;">${store.storeName}: ${store.storeNumber}</h3>
                                <h4 style="margin: 0 0 8px 0; font-size: 12px; font-weight: normal; color: #666;">${store.retailer}</h4>
                                <p style="margin: 0 0 4px 0; font-size: 14px;">${store.address}</p>
                                <p style="margin: 0 0 8px 0; font-size: 14px;">${store.city}, ${store.state} ${store.zip}</p>
                                <p style="margin: 0; text-align: center;">
                                    <span style="background: ${getStatusBgColor(store.status)}; color: ${getStatusTextColor(store.status)}; padding: 4px 12px; border-radius: 12px; font-size: 14px; font-weight: 500;">${statusDisplay}</span>
                                </p>
                            </div>
                        `
                    });

                    marker.addListener('click', () => {
                        // Close any open info windows
                        markers.forEach(m => m.infoWindow && m.infoWindow.close());
                        
                        // Open this info window
                        infoWindow.open(map, marker);
                        marker.infoWindow = infoWindow;
                        
                        // Also update the side panel
                        setSelectedStore(store);
                    });

                    markers.push(marker);
                });

                // Fit map to show all markers
                if (markers.length > 0) {
                    const bounds = new window.google.maps.LatLngBounds();
                    markers.forEach(marker => bounds.extend(marker.getPosition()));
                    map.fitBounds(bounds);
                    
                    // Ensure we don't zoom in too much
                    const listener = window.google.maps.event.addListener(map, 'idle', function() {
                        if (map.getZoom() > 10) map.setZoom(10);
                        window.google.maps.event.removeListener(listener);
                    });
                }
            };

            const fetchFromGoogleSheets = async () => {
                try {
                    setLoading(true);
                    setError('');

                    // Use the exact sheet name with asterisks
                    const encodedSheetName = encodeURIComponent(CONFIG.SHEET_NAME);
                    const url = `https://sheets.googleapis.com/v4/spreadsheets/${CONFIG.SHEET_ID}/values/${encodedSheetName}?key=${CONFIG.API_KEY}`;
                    
                    console.log('Fetching from URL:', url);
                    console.log('Sheet name being used:', CONFIG.SHEET_NAME);
                    
                    const response = await fetch(url);
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('API Error Response:', errorData);
                        throw new Error(`Google Sheets API error: ${response.status} - ${errorData.error?.message || response.statusText}`);
                    }
                    
                    const data = await response.json();
                    console.log('Google Sheets response:', data);
                    
                    if (!data.values || data.values.length === 0) {
                        throw new Error('No data found in the specified sheet');
                    }

                    const parsedStores = parseGoogleSheetsData(data.values);
                    setStores(parsedStores);
                    setLastUpdated(new Date());
                    console.log('Loaded stores:', parsedStores.length);

                    // Add markers to map if map is loaded
                    if (mapLoaded) {
                        addMarkersToMap(parsedStores);
                    }
                    
                } catch (err) {
                    console.error('Error fetching data:', err);
                    setError(err.message);
                } finally {
                    setLoading(false);
                }
            };

            const parseGoogleSheetsData = (values) => {
                const stores = [];
                
                console.log('Raw sheet data:', values);
                console.log('Header row:', values[0]);
                
                // Skip header row (index 0) and process data rows
                for (let i = 1; i < values.length; i++) {
                    const row = values[i];
                    
                    console.log(`Row ${i}:`, row);
                    
                    // Ensure we have enough columns (need at least column Q = index 16)
                    if (row.length >= 17) {
                        const status = row[0]?.toString().trim().toLowerCase(); // Column A (index 0)
                        console.log(`Row ${i} STATUS (Column A):`, `"${status}"`);
                        
                        // Include stores with Open, Reserved, or Staffed status
                        if (['open', 'reserved', 'staffed'].includes(status)) {
                            const lat = parseFloat(row[15]); // Column P (index 15) - Latitude
                            const lng = parseFloat(row[16]); // Column Q (index 16) - Longitude
                            
                            console.log(`Row ${i} coordinates (P=${lat}, Q=${lng}):`, lat, lng);
                            
                            // Only add if we have valid coordinates
                            if (!isNaN(lat) && !isNaN(lng)) {
                                const store = {
                                    status: row[0]?.toString().trim() || '',          // Column A - STATUS
                                    reserveLink: row[1]?.toString().trim() || '',     // Column B - RESERVE LINK  
                                    retailer: row[2]?.toString().trim() || '',        // Column C - RETAILER
                                    storeNumber: row[3]?.toString().trim() || '',     // Column D - STORE #
                                    storeName: row[4]?.toString().trim() || '',       // Column E - STORE NAME
                                    address: row[5]?.toString().trim() || '',         // Column F - ADDRESS
                                    city: row[6]?.toString().trim() || '',            // Column G - CITY
                                    state: row[7]?.toString().trim() || '',           // Column H - STATE
                                    zip: row[8]?.toString().trim() || '',             // Column I - ZIP
                                    latitude: lat,                                     // Column P - Latitude
                                    longitude: lng                                     // Column Q - Longitude
                                };
                                console.log(`Adding store ${i}:`, store);
                                stores.push(store);
                            } else {
                                console.log(`Row ${i} skipped - invalid coordinates P=${lat}, Q=${lng}`);
                            }
                        } else {
                            console.log(`Row ${i} skipped - status "${status}" not in allowed list`);
                        }
                    } else {
                        console.log(`Row ${i} skipped - insufficient columns (need 17, has ${row.length})`);
                    }
                }
                
                console.log('Final parsed stores:', stores.length, stores);
                return stores;
            };

            // Initialize map when Google Maps API loads
            useEffect(() => {
                const checkGoogleMaps = () => {
                    if (window.google && window.google.maps) {
                        initializeMap();
                    } else {
                        setTimeout(checkGoogleMaps, 100);
                    }
                };
                checkGoogleMaps();
            }, []);

            // Update markers when stores change
            useEffect(() => {
                if (mapLoaded && stores.length > 0) {
                    addMarkersToMap(filteredStores);
                }
            }, [stores, filteredStores, mapLoaded]);

            // Initial load
            useEffect(() => {
                fetchFromGoogleSheets();
            }, []);

            // Auto-refresh setup
            useEffect(() => {
                if (CONFIG.REFRESH_MINUTES > 0) {
                    const interval = setInterval(() => {
                        console.log('Auto-refreshing data...');
                        fetchFromGoogleSheets();
                    }, CONFIG.REFRESH_MINUTES * 60 * 1000);

                    return () => clearInterval(interval);
                }
            }, []);

            const filteredStores = useMemo(() => {
                return stores.filter(store => {
                    const matchesSearch = store.storeName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                       store.city.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                       store.retailer.toLowerCase().includes(searchTerm.toLowerCase());
                    const matchesStatus = statusFilter === 'all' || store.status.toLowerCase() === statusFilter;
                    const matchesState = stateFilter === 'all' || store.state === stateFilter;
                    
                    return matchesSearch && matchesStatus && matchesState;
                });
            }, [stores, searchTerm, statusFilter, stateFilter]);

            const uniqueStates = [...new Set(stores.map(store => store.state))].sort();
            const statusCounts = stores.reduce((acc, store) => {
                const status = store.status.toLowerCase();
                acc[status] = (acc[status] || 0) + 1;
                return acc;
            }, {});

            const handleExportToExcel = () => {
                const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
                const filename = `Freedom_THD_Stores_${timestamp}.csv`;
                exportToExcel(filteredStores, filename);
            };

            return (
                <div className="w-full h-screen bg-gray-50 flex flex-col">
                    {/* Header */}
                    <div className="bg-white shadow-sm border-b px-4 md:px-6 py-4">
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
                            <h1 className="text-xl md:text-2xl font-bold text-gray-900">Freedom THD Stores Map</h1>
                            <div className="flex gap-2">
                                <button
                                    onClick={handleExportToExcel}
                                    className="px-3 md:px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors flex items-center gap-2 text-sm md:text-base touch-manipulation"
                                >
                                    <Download className="w-4 h-4" />
                                    <span className="hidden sm:inline">Export to Excel</span>
                                    <span className="sm:hidden">Export</span>
                                </button>
                                <button
                                    onClick={fetchFromGoogleSheets}
                                    disabled={loading}
                                    className="px-3 md:px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2 text-sm md:text-base touch-manipulation"
                                >
                                    {loading ? <Loader className="w-4 h-4 animate-spin" /> : <RefreshCw className="w-4 h-4" />}
                                    <span className="hidden sm:inline">Refresh Data</span>
                                    <span className="sm:hidden">Refresh</span>
                                </button>
                            </div>
                        </div>

                        {error && (
                            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2">
                                <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0" />
                                <span className="text-red-700 text-sm">{error}</span>
                            </div>
                        )}

                        {lastUpdated && (
                            <div className="mb-4 text-xs md:text-sm text-gray-600">
                                Last updated: {lastUpdated.toLocaleString()}
                                {CONFIG.REFRESH_MINUTES > 0 && (
                                    <span className="hidden sm:inline"> • Auto-refresh every {CONFIG.REFRESH_MINUTES} minutes</span>
                                )}
                            </div>
                        )}

                        {/* Status Summary */}
                        <div className="mb-4 flex flex-wrap gap-3 md:gap-4 text-xs md:text-sm">
                            <div className="flex items-center gap-2 touch-manipulation">
                                <div className="w-3 h-3 rounded-full bg-green-500"></div>
                                <span>Open: {statusCounts.open || 0}</span>
                            </div>
                            <div className="flex items-center gap-2 touch-manipulation">
                                <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                                <span>Reserved: {statusCounts.reserved || 0}</span>
                            </div>
                            <div className="flex items-center gap-2 touch-manipulation">
                                <div className="w-3 h-3 rounded-full bg-red-500"></div>
                                <span>Staffed: {statusCounts.staffed || 0}</span>
                            </div>
                        </div>
                        
                        {/* Filters */}
                        <div className="flex flex-col sm:flex-row gap-3 md:gap-4 items-stretch sm:items-center">
                            <div className="flex items-center gap-2 flex-1 min-w-0">
                                <Search className="w-4 h-4 text-gray-500 flex-shrink-0" />
                                <input
                                    type="text"
                                    placeholder="Search stores..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="flex-1 px-3 py-2 border rounded-md text-sm md:text-base touch-manipulation"
                                />
                            </div>
                            
                            <div className="flex items-center gap-2">
                                <Filter className="w-4 h-4 text-gray-500 flex-shrink-0" />
                                <select
                                    value={statusFilter}
                                    onChange={(e) => setStatusFilter(e.target.value)}
                                    className="px-3 py-2 border rounded-md text-sm md:text-base touch-manipulation min-w-0"
                                >
                                    <option value="all">All Status</option>
                                    <option value="open">Open</option>
                                    <option value="reserved">Reserved</option>
                                    <option value="staffed">Staffed</option>
                                </select>
                            </div>

                            <select
                                value={stateFilter}
                                onChange={(e) => setStateFilter(e.target.value)}
                                className="px-3 py-2 border rounded-md text-sm md:text-base touch-manipulation min-w-0"
                            >
                                <option value="all">All States</option>
                                {uniqueStates.map(state => (
                                    <option key={state} value={state}>{state}</option>
                                ))}
                            </select>
                            
                            <div className="text-xs md:text-sm text-gray-600 whitespace-nowrap">
                                Showing {filteredStores.length} of {stores.length}
                            </div>
                        </div>
                    </div>

                    <div className="flex-1 flex">
                        {/* Google Map */}
                        <div className="flex-1 relative">
                            <div ref={mapRef} id="map" className="w-full h-full"></div>
                            
                            {loading && (
                                <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10">
                                    <div className="flex items-center gap-3">
                                        <Loader className="w-6 h-6 animate-spin text-blue-600" />
                                        <span className="text-gray-700">Loading store data...</span>
                                    </div>
                                </div>
                            )}
                        </div>
                        
                        {/* Store Details Panel */}
                        {selectedStore && (
                            <div className="w-full sm:w-80 bg-white shadow-lg border-l overflow-y-auto">
                                <div className="p-4 md:p-6">
                                    <div className="flex items-start justify-between mb-4">
                                        <div className="flex-1 min-w-0">
                                            <h2 className="text-lg md:text-xl font-bold truncate">{selectedStore.storeName}: {selectedStore.storeNumber}</h2>
                                            <p className="text-sm text-gray-500">{selectedStore.retailer}</p>
                                        </div>
                                        <button
                                            onClick={() => setSelectedStore(null)}
                                            className="text-gray-400 hover:text-gray-600 text-2xl ml-2 touch-manipulation flex-shrink-0"
                                        >
                                            ×
                                        </button>
                                    </div>
                                    
                                    <div className="space-y-4">
                                        <div>
                                            <div className="text-sm font-medium text-gray-700 mb-1">Status</div>
                                            <div 
                                                className="inline-block px-3 py-2 rounded-full text-sm font-medium"
                                                style={{ 
                                                    backgroundColor: getStatusBgColor(selectedStore.status),
                                                    color: getStatusTextColor(selectedStore.status)
                                                }}
                                            >
                                                {selectedStore.status.charAt(0).toUpperCase() + selectedStore.status.slice(1).toLowerCase()}
                                            </div>
                                        </div>
                                        
                                        <div>
                                            <div className="text-sm font-medium text-gray-700 mb-1">Store Number</div>
                                            <div className="text-gray-900">{selectedStore.storeNumber}</div>
                                        </div>
                                        
                                        <div>
                                            <div className="text-sm font-medium text-gray-700 mb-1">Address</div>
                                            <div className="text-gray-900">
                                                {selectedStore.address}<br/>
                                                {selectedStore.city}, {selectedStore.state} {selectedStore.zip}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            );
        };

        ReactDOM.render(<FreedomTHDStoresMap />, document.getElementById('root'));
    </script>
</body>
</html>
